import os
import asyncio
from flask import Flask
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram import Update
from deep_translator import GoogleTranslator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ADVERTISEMENT = "üåü –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! –û—Ç–ª–∏—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫! üåü"
active_chats = set()

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
def translate_text(text):
    try:
        return GoogleTranslator(source='auto', target='ru').translate(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
        
    message = update.message
    user = message.from_user
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—ã
    if user.is_bot or message.text.startswith('/'):
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
    try:
        translated = translate_text(message.text)
        if translated and translated != message.text:
            reply = f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n{translated}"
            await message.reply_text(reply)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

# –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
def setup_bot():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    return application

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/')
def home():
    return "Telegram Bot is running!"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = setup_bot()
    await application.run_polling()

# –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    import threading
    thread = threading.Thread(target=lambda: asyncio.run(main()))
    thread.daemon = True
    thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)